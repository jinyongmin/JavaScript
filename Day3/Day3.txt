함수 선언식
 -호이스팅 선언식 지정하지않아도 함수를 불러올 수 있음 -->문제가 살짝 var변수

함수 표현식

const hello = function (){
    console.log('안녕하세요. JavaScript!');
}
-function () 익명함수

hello();

화살표 함수 -->익명 함수 변형느낌   function()
- ECMA Script6에 추가된 문법
- function 키워드를 사용하여 함수를 만드는 것보다 간단하게 표현
- 화살표 함수는 항상 익명

위에 문법 =
    const hello = () => {
    console.log('안녕하세요. JavaScript!');
        }

const hello = () => console.log('안녕하세요. JavaScript!');

매개변수가 있는 경우
    const sum = funtion(x ,y){
    console.log(`두 수의 합: ${x + y}`);
        }
매개변수가 있는경우를 화살표 함수로 사용!
const sum = (x,y) => console.log(`두 수의 합: ${x + y}`);

리턴값이 있는 경우
const result = function(x, y){ 
    let sum = 0;
    for(let i=x; i<=y; i++){
        sum += i;
    }
    return sum;
}

const result = (x, y) => {
    let sum = 0;
    for(let i=x; i<=y; i++){
        sum += i;
    }
    return sum;
}

*한 줄로 표현할 때 리턴값을 써주지 않아도됨 
제곱
const pow = x => x * x;

객체(Object)
프로퍼티(property)
- 이름과 값으로 구성된 정렬되지 않은 집합
- 프로퍼티는 함수도 저장할 수 있음(프로퍼티 메소드)

   const userid ={'no':1, 'name':'김사과', 'age':20, 'gender':'여자'};

   객체를 생성하는 방법
   1.리터럴 표기법
   const 객체명 = {
    프로퍼티명1: 값1,
    프로퍼티명2: 값2,
    ...
    //프로퍼티 함수
    프로퍼티명n: funtion(){
        프로퍼티 메소드가 호출되면 실행할 문장;
        ...
    }
   }

2. 생성자를 이용
    function 생성자명(매개변수1, 매개변수2..){
        this.프로퍼티명1 = 값1;
        this.프로퍼티명2 = 값2;
        ...
        this.프로퍼티명n: funtion(){
            프로퍼티 메소드가 호출되면 실행할 문장;
            ...
        }
    }
    const 객체명 = new 생성자명(값1, 값2 ..);

- new 연산자를 사용하여 객체를 생성하고 초기화 할 수 있음
- 객체를 생성할 때 사용하는 함수를 생성자라고 함
- 새롭게 생성되는 객체를 초기화하는 역할
- 같은 형태의 객체를 여러개 생성할 때 유리

// 1과 2의 다른점 
1. 하나의 객체만 만들 때
2. 여러개의 객체 만들 때


3. 클래스를 이용    -->내부적으로 생성자가 만들어진다!

    const 클래스명 = class {
        constructor(매개변수1, 매개변수2 ..){
            this.프로퍼티명1 = 값1;
            this.프로퍼티명2 = 값2;
            ...
        }
        메소드명(매개변수1, 매개변수2 ..){
            메소드가 호출되면 실행할 문장;
            ...
    }
}

    const 객체명1 = new 클래스명(값1, 값2 ..);
    const 객체명2 = new 클래스명(값1, 값2 ..);
    ...

-ECMA Script6에 추가된 객체 생성 방법
-내부적으로 생성자를 이용한 객체 생성 방법과 동일하게 작동


상속
- 자바스크립트는 프로토타입 기반의 객체 지향 언어(클래스 기반의 객체지향 언어와 다름)
- 현재 존재하고 있는 객체의 프로토타입을 사용하여 해당 객체를 복사하고 재사용하는 것

✅프로토타입(prototype)     --?? 생성자를 사용하여 만들면  프로퍼티 하나 하나 올라감+ 프로토타입도 같이 올라감
- 모든 객체는 프로토타입이라는 객체를 가지고 있음
- 모든 객체는 프로토타입으로부터 프로퍼티와 프로퍼티 메소드를 상속받음
- 모든 객체는 최소한 하나 이상의 다른 객체로부터 상속을 받으며 상속되는 정보를 제공하는 객체를 프로토타입이라고 함

    const dog = new Dog(); //Dog.prototype // 생성자가 prototype, Object.prototype  --> 두개를 가지고 생성자가 만들어짐??


Math 객체
수학에서 자주 사용하는 상수와 함수들을 미리 구현한 자바스크립트 표준 내장 객체
min(): 전달받은값중 가장 작은 수 를 리턴. 매개변수가 전달되지 않으면 Infinity를 리턴. 비교할 수 없는 값이 포함되어 있으면 NaN을 리턴
max(): 전달받은값중 가장 큰 수 를 리턴. 매개변수가 전달되지 않으면 -Infinity를 리턴. 비교할 수 없는 값이 포함되어 있으면 NaN을 리턴
round(): 소수점 첫번째 자리에서 반올림하여 그 결과를 리턴
floor(): 버림
ceil(): 소수점 올림
random(): 0보다 크거나 같고 1보다 작은 무작위 소수를 리턴

String 객체
문자열을 손쉽게 다룰 수 있는 객체

const str1 ='JavaScript';
const str2 = new String('JavaScript');

str1 == str2 //true
str1 === str2 //false

legnth: 문자열의 길이를 반환하는 프러퍼티
indexOf(): 특정 문자나 문자열이 처음으로 등장하는 위치를 리턴
charAt(): 특정 문자열에서 전달 받은 인덱스에 위치한 문자를 리턴
includes(): 특정 문자열에서 전달 받은 문자열이 포함되어 있는지 여부를 리턴
substring(): 전달 받은 시작 인덱스부터 종료 인덱스 바로 앞까지 문자열을 추출
substr(): 전달 받은 시작 인덱스부터 전달 받은 개수만큼 문자열을 추출
split(): 구분자를 기준으로 나눈 후 나뉜 문자열을 하나의 배열에 저장
replace(): 원본 문자열의 일부를 전달 받은 문자열로 치환
trim(): 문자열의 앞뒤 공백을 제거
toUpperCase(): 모두 대문자로 변환
toLowerCase(): 모두 소문자로 변환

Date 객체
날짜, 시간등을 쉽게 처리할 수 있는 내장 객체

연도(year)
- 2자리로 연도를 표기: 1900년 ~ 1999년
- 4자리로 연도를 표기: 2000년 ~

월(month)
- 0(1월) ~ 11(12월)

Date 객체를 생성하는 방법
new Date(): 현재 날짜 시간을 저장한 객체가 생성
new Date('날짜 문자열'): 해당 특정 날짜와 시간을 저장한 객체가 생성
new Date('밀리초'): 1970년 1월 1일 0시 0분 0초 ~ 해당 밀리초만큼 지난 날짜와 시간을 저장한 객체가 생성
new Date(년, 월, 일, 시, 분, 초, 밀리초): 해당 특정 날짜와 시간을 저장한 객체가 생성


BOM(Browser Object Model): 비표준
웹 브라우저에서 구현된 JavaScript 객체 모델을 의미하며 window 객체의 프로퍼티로 조회가 가능

window 객체     //alert 브라우저를 말함
웹 브라우저의 창이나 탭을 표현하기 위한 객체들이며 웹 브라우저는 window 객체를 이용하여
브러우저 창을  표현할 수 있음

setTimeout()
일정시간이 지난 후 매개변수로 제공된 함수를 실행
//일반 선언형이어도 상관x
    const 함수명 = function(){
        실행문;
        ...
    }
//일정 시간이 지난후 함수가 호출?
    const st = setTimeout(함수명, 시간); 

setInterval()
일정 시간마다 매개변수로 제공된 함수를 실행

clearTimeout()
:setTimeout()를 취소함
clearInterval()
:setInterval()를 취소함


문제.
setInterval(), clearInterval()를 사용하여 아래와 같은 시계 프로그램을 만들어보자.

    14:20:1
    14:20:2
    14:20:3
    14:20:4
    ....
    14:20:10 <--종료 버튼을 누르면 시간이 멈춤
    14:20:40 <--시작 버튼을 누르면 다시 시간이 진행됨
    console에 계속 찍어줌 버튼을 누르면 시간이 더이상 가지 않도록
    [시작][종료]

    시간만 datetime가져와서 1초마다 찍고 멈추는거 만들고 시작하는거 만들기


location 객체
현재 브라우저에 표시된 HTML 문서의 주소를 얻거나, 브라우저에 새 문서를 불러올 때 사용
http://www.koreaitjob.co.kr/?gclid=EAIaIQobChMIxMWe77Cb-wIVMtpMAh2VrwHSEAAYASAAEgIu8PD_BwE
------ -------------------  --------------------------------------------------------------
protocal    hostname                pathname

    protocol: 콜론을 포함하는 https, http, ftp등 프로토콜 정보를 리턴
    hostname: 호스트의 이름과 포트번호를 리턴
    pathname: URL 경로부분의 정보를 리턴
    href: 페이지 URL 전체 정보를 리턴 또는 URL을 지정하여 페이지를 이동

form 객체(???)
일반적인 폼에 접근할 때 사용, document.forms 컬렉션을 이용해서 접근

객체
    <form name="myform" id="regform" method="post" action="regist.jsp">
        아이디: <input type="text" name="userid" id="id"><br>
        비밀번호: <input type="password" name="userpw" id="pw"></br>
        </form>

폼 접근
const frm = document.myform; frm에 객체 자체가 들어감   //name으로 찾음
            =body   . form의 name을 찾음

const frm = document.getElementById('regform');          //id로 찾음
const frm = document.forms['myform'];                   //name으로 찾음
const frm = document.forms[0];                  //다른폼이 없다는 전제하에 첫번 째 폼을 찾음

//아이디 입력상자로 접근
const userid = frm.userid; (name)               //폼을 찾앗으니 안에 있는 name을 찾음
const userid = document.getElementById('id');
const userid = document.forms['myform'].elements[0];        //첫번째요소를 찾음
const userid = document.forms['myform'].elements['userid'];         //
const userid = document.forms[0][0];                            // ??